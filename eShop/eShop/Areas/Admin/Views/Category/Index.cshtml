@using eShop.Areas.Admin.ViewModels.Category
@model IEnumerable<ListItemCategoryVM>

@{
	ViewData["Title"] = "Index";
}

<h1>Index</h1>

<div id="tblCate">
	<p class="my-3">
		<button class="btn btn-primary me-1" v-on:click="showModalForAdd()">Thêm danh mục</button>
		<button class="btn btn-info" v-on:click="refreshData()">Làm mới dữ liệu</button>
	</p>
	<table class="table">
		<thead>
			<tr>
				<th>ID</th>
				<th>Tên danh mục</th>
				<th>Tạo lúc</th>
				<th></th>
			</tr>
		</thead>
		<tbody>
			<tr v-for="cate in categories">
				<td>{{cate.id}}</td>
				<td>{{cate.name}}</td>
				<td>{{new Date(cate.createdAt).toLocaleString()}}</td>
				<td>
					<button class="btn me-1" v-on:click="getDataForUpdate(cate.id)">Sửa</button>
					<button class="btn btn-danger" v-on:click="deleteCategory(cate.id)">Xóa</button>
				</td>
			</tr>
		</tbody>
	</table>

	<partial name="_Create" />

</div>


@section Scripts{

	<script>
		// cấu hình notification
		let opt = {
			minDurations: {
				"async-block": 300,
				"async": 300
			}
		};
		let noti = new AWN(opt);

		Vue.createApp({
			data() {
				return {
					action: '',
					mCreate: null,
					categories: [],
					cateData: {
						id: 0,
						name: null
					}
				}
			},
			methods: {
				getDataForUpdate(id) {
					noti.async(
						axios.get("/Admin/Category/Detail/" + id),
						(response) => {
							var data = response.data;
							this.action = "Cập nhật";
							this.cateData = { ...data };
							this.mCreate.show();
						}
					);
				},
				clearData() {
					this.cateData.name = '';	// xóa data
					this.cateData.id = 0;
				},
				showModalForAdd() {
					this.action = "Thêm mới";
					this.clearData();
					this.mCreate.show();
				},
				addOrUpdateCateData() {
					if (!this.cateData.name) {
						noti.warning("Chưa nhập dữ liệu");
						return;
					}
					let url = "/Admin/Category/Create";
					if (this.cateData.id != 0) {
						url = "/Admin/Category/Update/" + this.cateData.id;
					}

					noti.async(
						axios.post(url, this.cateData),
						(res) => {
							if (res.data.success) {
								noti.success(this.action + " danh mục thành công");
								this.mCreate.hide();		// ẩn modal
								this.clearData();
								// Load lại dữ liệu trang index
								this.refreshData();
							}
						},
						(err) => {
							let statusCode = err.response.status;

							if (statusCode == 400) {
								var errRes = err.response.data;		// object
								for (let prop in errRes) {
									for (let mesg of errRes[prop]) {	// errRes[prop] là array
										noti.alert(mesg);
										return;
									}
								}
							}
						}
					);
				},

				deleteCategory(id) {
					noti.confirm(
						"Xác nhận xóa dữ liệu này?",
						() => {
							noti.async(
								axios.get("/Admin/Category/Delete/" + id),
								(response) => {
									var data = response.data;
									if (data.success) {
										noti.success("Xóa danh mục thành công");
										// Load lại dữ liệu trang index
										this.refreshData();
									} else {
										noti.warning(data.mesg);
									}
								}
							);
						}
					);
				},

				refreshData() {
					noti.asyncBlock(
						// lệnh gọi ajax
						axios.get("/Admin/Category/GetAll"),
						// xử lý khi thành công,
						(response) => {
							this.categories = response.data;
						},
						// xử lý khi thất bại
						(err) => {
							console.log(err);
						},
						"Chờ tí"
					);
				}
			},
			mounted() {
				this.refreshData();
				this.mCreate = new bootstrap.Modal("#modalCreate");
			}
		}).mount("#tblCate");
	</script>
}